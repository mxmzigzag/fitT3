generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    caloriesLimit Float @default(2300)
    days          Day[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Day {
    id   String   @id @default(uuid())
    date DateTime

    meals Meal[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?

    @@index([userId])
}

enum MealTypes {
    BREAKFAST
    LUNCH
    DINNER
}

model Meal {
    id   String    @id @default(uuid())
    type MealTypes

    ingredients IngredientWithWeight[]
    dayId       String?
    day         Day?                   @relation(fields: [dayId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([dayId])
}

model IngredientWithWeight {
    id     String @id @default(uuid())
    weight Int

    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
    ingredientId String
    meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
    mealId       String

    @@index([ingredientId])
    @@index([mealId])
}

model Ingredient {
    id           String @id @default(uuid())
    name         String @unique
    carbohydrate Float
    protein      Float
    fat          Float
    calories     Float

    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    IngredientWithWeight IngredientWithWeight[]
}
